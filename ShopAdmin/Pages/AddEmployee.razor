@page "/addemployeeshop"
@page "/addemployeeshop/{edit}"
@inject Appstate mystate;

@using Entities;
@using ShopAdmin.Data;
@inject IEmployee em;
@inject NavigationManager nm;
<AuthorizeView Context="authorizationContext" Roles="ShopOwner,administrator">
    <Authorized>

<EditForm Model="EmployeeModel">
     <div class="row">
                <div class="col-md-8 offset-lg-2">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h3>Manage your profile</h3>
            <input class ="form-control mb-2" type="text" @bind="@EmployeeModel.firstname" placeholder="Enter First Name" />

            <input class ="form-control mb-2" type="text" @bind="@EmployeeModel.lastname" placeholder="Enter last Name" />

            <input class="form-control mb-2"  type="text" @bind="@EmployeeModel.phone" placeholder="Enter phone " />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.dob" placeholder="Enter dob" />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.cnic" placeholder="Enter Cnic" />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.padress" placeholder="Enter Permanent Adress" />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.tadress" placeholder="Enter Temporary Adress" />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.emptype" placeholder="Enter Employee Type" />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.joiningdate" placeholder="Enter joining date " />

            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.enddate" placeholder="Enter End Date " />
            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.username" placeholder="Enter Employee Username" />
            <input class="form-control mb-2" type="text" @bind="@EmployeeModel.role" placeholder="Enter Role " />
            <input type="text" @bind="@EmployeeModel.password" placeholder="Enter Password " />
            
            <InputFile OnChange="@OnInputFileChange" class="form-control mb-2" />

            <button type="submit" @onclick="saveEmployee" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>
</EditForm>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    EntEmployee EmployeeModel { get; set; } = new EntEmployee();
    [Parameter] public string? edit { get; set; }
    private string? ButtonTitle { get; set; } = "Save";

    protected override async Task OnInitializedAsync()
    {
        if (edit == "update")
        {
            EmployeeModel = ShopEmployee.UpdateBO;
            ButtonTitle = "Update";
        }
        //return base.OnInitializedAsync();
    }

    private void saveEmployee()
    {
        if (ButtonTitle == "Save")
        {
            Random rand = new Random();
            EmployeeModel.empid = rand.Next(100000, 999999);
            EmployeeModel.shopid = mystate.ShopDetail;
            em.SaveEmployee(EmployeeModel);
            nm.NavigateTo($"/shopemployee");
        }
        else if (ButtonTitle == "Update")
        {
            em.UpdateEmployee(EmployeeModel);
            nm.NavigateTo($"/shopemployee");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {

            var imagesPath = "wwwroot/images";

            if (!Directory.Exists(imagesPath))
            {
                Directory.CreateDirectory(imagesPath);
            }

            var fileName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
            var filePath = Path.Combine(imagesPath, fileName);

            // Save the file to the specified path.
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            // Save the relative path or the necessary identifier of the image in the database.
            EmployeeModel.image = filePath; // Adjust based on your model and how you'll access the image.
        }
    }
}
